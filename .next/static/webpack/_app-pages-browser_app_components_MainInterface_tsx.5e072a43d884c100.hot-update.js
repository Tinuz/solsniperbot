"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_app_components_MainInterface_tsx",{

/***/ "(app-pages-browser)/./app/hooks/useMintDetection.ts":
/*!***************************************!*\
  !*** ./app/hooks/useMintDetection.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMintDetection: () => (/* binding */ useMintDetection)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_spl_token__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/spl-token */ \"(app-pages-browser)/./node_modules/@solana/spl-token/lib/esm/constants.js\");\n/* harmony import */ var _services_HeliusConnection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/HeliusConnection */ \"(app-pages-browser)/./app/services/HeliusConnection.ts\");\n/* __next_internal_client_entry_do_not_use__ useMintDetection auto */ \n\n\nconst useMintDetection = (connection, isMonitoring)=>{\n    const [detectedTokens, setDetectedTokens] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [subscriptionId, setSubscriptionId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isConnected, setIsConnected] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [heartbeatCount, setHeartbeatCount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [lastHeartbeat, setLastHeartbeat] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [accountsProcessed, setAccountsProcessed] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [pollingResults, setPollingResults] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [intervals, setIntervals] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const processNewToken = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useMintDetection.useCallback[processNewToken]\": async (logs, context)=>{\n            try {\n                // Count transaction log events\n                setAccountsProcessed({\n                    \"useMintDetection.useCallback[processNewToken]\": (prev)=>prev + 1\n                }[\"useMintDetection.useCallback[processNewToken]\"]);\n                // Check if this transaction contains InitializeMint\n                const hasInit = logs.logs.find({\n                    \"useMintDetection.useCallback[processNewToken].hasInit\": (l)=>l.includes(\"InitializeMint\")\n                }[\"useMintDetection.useCallback[processNewToken].hasInit\"]);\n                if (!hasInit) return;\n                console.log('üîî InitializeMint detected in slot', logs.slot);\n                console.log('  Signature:', logs.signature);\n                try {\n                    const activeConnection = connection || _services_HeliusConnection__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getRpcConnection();\n                    // Get the parsed transaction with maxSupportedTransactionVersion\n                    console.log('üìù Fetching parsed transaction...');\n                    const parsedTx = await activeConnection.getParsedTransaction(logs.signature, {\n                        commitment: \"confirmed\",\n                        maxSupportedTransactionVersion: 0\n                    });\n                    if (!parsedTx) {\n                        console.warn('‚ö†Ô∏è Parsed transaction not found for signature:', logs.signature);\n                        return;\n                    }\n                    console.log('üìÑ Parsed transaction retrieved successfully');\n                    console.log('üìã Instructions found:', parsedTx.transaction.message.instructions.length);\n                    // Log all instructions to debug\n                    parsedTx.transaction.message.instructions.forEach({\n                        \"useMintDetection.useCallback[processNewToken]\": (ix, index)=>{\n                            var _ix_parsed, _ix_programId;\n                            console.log(\"  Instruction \".concat(index, \":\"), {\n                                program: ix.program,\n                                parsed: (_ix_parsed = ix.parsed) === null || _ix_parsed === void 0 ? void 0 : _ix_parsed.type,\n                                programId: (_ix_programId = ix.programId) === null || _ix_programId === void 0 ? void 0 : _ix_programId.toString()\n                            });\n                        }\n                    }[\"useMintDetection.useCallback[processNewToken]\"]);\n                    // Find the initializeMint instruction\n                    const initInstr = parsedTx.transaction.message.instructions.find({\n                        \"useMintDetection.useCallback[processNewToken].initInstr\": (ix)=>{\n                            var _ix_parsed;\n                            return ix.program === \"spl-token\" && ((_ix_parsed = ix.parsed) === null || _ix_parsed === void 0 ? void 0 : _ix_parsed.type) === \"initializeMint\";\n                        }\n                    }[\"useMintDetection.useCallback[processNewToken].initInstr\"]);\n                    if (!initInstr || !initInstr.parsed) {\n                        console.warn('‚ö†Ô∏è initializeMint instruction not found in parsedTx');\n                        console.log('üìù Available spl-token instructions:');\n                        parsedTx.transaction.message.instructions.filter({\n                            \"useMintDetection.useCallback[processNewToken]\": (ix)=>ix.program === \"spl-token\"\n                        }[\"useMintDetection.useCallback[processNewToken]\"]).forEach({\n                            \"useMintDetection.useCallback[processNewToken]\": (ix, index)=>{\n                                var _ix_parsed, _ix_parsed1;\n                                console.log(\"  SPL Token instruction \".concat(index, \":\"), (_ix_parsed = ix.parsed) === null || _ix_parsed === void 0 ? void 0 : _ix_parsed.type, (_ix_parsed1 = ix.parsed) === null || _ix_parsed1 === void 0 ? void 0 : _ix_parsed1.info);\n                            }\n                        }[\"useMintDetection.useCallback[processNewToken]\"]);\n                        return;\n                    }\n                    // Extract mint address from parsed info\n                    const mintAddress = initInstr.parsed.info.mint;\n                    console.log('‚úÖ NEW MINT ADDRESS:', mintAddress);\n                    console.log('üìã Full instruction info:', initInstr.parsed.info);\n                    const newToken = {\n                        mint: mintAddress,\n                        timestamp: Date.now(),\n                        signature: logs.signature,\n                        creator: 'InitializeMint',\n                        name: \"Token-\".concat(mintAddress.slice(0, 8)),\n                        symbol: 'NEW',\n                        supply: 0\n                    };\n                    console.log('üîÑ Adding token to state:', newToken);\n                    setDetectedTokens({\n                        \"useMintDetection.useCallback[processNewToken]\": (prev)=>{\n                            console.log('üìä Current tokens in state:', prev.length);\n                            const isDuplicate = prev.some({\n                                \"useMintDetection.useCallback[processNewToken].isDuplicate\": (token)=>token.mint === mintAddress\n                            }[\"useMintDetection.useCallback[processNewToken].isDuplicate\"]);\n                            if (isDuplicate) {\n                                console.log('‚ö†Ô∏è Duplicate token detected, skipping:', mintAddress);\n                                return prev;\n                            }\n                            console.log('üéâ NEW TOKEN ADDED TO STATE:', mintAddress);\n                            const newState = [\n                                newToken,\n                                ...prev\n                            ].slice(0, 20);\n                            console.log('üìä New state length:', newState.length);\n                            return newState;\n                        }\n                    }[\"useMintDetection.useCallback[processNewToken]\"]);\n                } catch (error) {\n                    console.log('‚ö†Ô∏è Error processing transaction:', error);\n                    console.log('üìã Error details:', {\n                        message: error instanceof Error ? error.message : 'Unknown error',\n                        stack: error instanceof Error ? error.stack : undefined,\n                        signature: logs.signature\n                    });\n                }\n            } catch (error) {\n                console.error('Error processing mint detection:', error);\n                console.error('üìã Outer error details:', {\n                    message: error instanceof Error ? error.message : 'Unknown error',\n                    logs: logs\n                });\n            }\n        }\n    }[\"useMintDetection.useCallback[processNewToken]\"], [\n        connection\n    ]);\n    // Light polling backup method\n    const pollForNewMints = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useMintDetection.useCallback[pollForNewMints]\": async ()=>{\n            try {\n                const activeConnection = connection || _services_HeliusConnection__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getRpcConnection();\n                // Check recent signatures (light method)\n                try {\n                    const signatures = await activeConnection.getSignaturesForAddress(_solana_spl_token__WEBPACK_IMPORTED_MODULE_2__.TOKEN_PROGRAM_ID, {\n                        limit: 5\n                    });\n                    setPollingResults(signatures.length);\n                } catch (error) {\n                    setPollingResults({\n                        \"useMintDetection.useCallback[pollForNewMints]\": (prev)=>prev + 1\n                    }[\"useMintDetection.useCallback[pollForNewMints]\"]) // Just show activity\n                    ;\n                }\n            } catch (error) {\n            // Silent polling errors\n            }\n        }\n    }[\"useMintDetection.useCallback[pollForNewMints]\"], [\n        connection\n    ]);\n    const startMonitoring = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useMintDetection.useCallback[startMonitoring]\": async ()=>{\n            if (!isMonitoring || subscriptionId) return;\n            const activeConnection = connection || _services_HeliusConnection__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getRpcConnection();\n            try {\n                console.log('üîç Starting mint detection with onLogs...');\n                // Test connection\n                const connectionTest = await _services_HeliusConnection__WEBPACK_IMPORTED_MODULE_1__[\"default\"].testConnection();\n                if (!connectionTest) {\n                    throw new Error('Connection test failed');\n                }\n                // Setup transaction logs listener (more precise than account changes)\n                console.log('üì° Setting up onLogs listener for InitializeMint...');\n                const id = activeConnection.onLogs(_solana_spl_token__WEBPACK_IMPORTED_MODULE_2__.TOKEN_PROGRAM_ID, {\n                    \"useMintDetection.useCallback[startMonitoring].id\": (logs, context)=>{\n                        try {\n                            processNewToken(logs, context);\n                        } catch (error) {\n                            console.error('Error in processNewToken:', error);\n                        }\n                    }\n                }[\"useMintDetection.useCallback[startMonitoring].id\"], 'confirmed');\n                setSubscriptionId(id);\n                setIsConnected(true);\n                console.log('‚úÖ onLogs monitoring started - ID:', id);\n                console.log('üéØ Listening for InitializeMint transactions');\n                console.log('üìä This method is more precise than account changes');\n                // Heartbeat every 30 seconds\n                const heartbeatInterval = setInterval({\n                    \"useMintDetection.useCallback[startMonitoring].heartbeatInterval\": ()=>{\n                        setHeartbeatCount({\n                            \"useMintDetection.useCallback[startMonitoring].heartbeatInterval\": (prev)=>{\n                                const newCount = prev + 1;\n                                setLastHeartbeat(Date.now());\n                                setAccountsProcessed({\n                                    \"useMintDetection.useCallback[startMonitoring].heartbeatInterval\": (currentCount)=>{\n                                        setPollingResults({\n                                            \"useMintDetection.useCallback[startMonitoring].heartbeatInterval\": (currentPollingResults)=>{\n                                                console.log(\"\\uD83D\\uDC93 Heartbeat #\".concat(newCount, \" - \").concat(currentCount, \" transactions, \").concat(currentPollingResults, \" activity\"));\n                                                return currentPollingResults;\n                                            }\n                                        }[\"useMintDetection.useCallback[startMonitoring].heartbeatInterval\"]);\n                                        return currentCount;\n                                    }\n                                }[\"useMintDetection.useCallback[startMonitoring].heartbeatInterval\"]);\n                                return newCount;\n                            }\n                        }[\"useMintDetection.useCallback[startMonitoring].heartbeatInterval\"]);\n                    }\n                }[\"useMintDetection.useCallback[startMonitoring].heartbeatInterval\"], 30000);\n                // Light polling every 2 minutes\n                const pollingInterval = setInterval({\n                    \"useMintDetection.useCallback[startMonitoring].pollingInterval\": ()=>{\n                        pollForNewMints();\n                    }\n                }[\"useMintDetection.useCallback[startMonitoring].pollingInterval\"], 120000);\n                setIntervals({\n                    heartbeat: heartbeatInterval,\n                    polling: pollingInterval\n                });\n                // Initial setup\n                setHeartbeatCount(1);\n                setLastHeartbeat(Date.now());\n                pollForNewMints();\n            } catch (error) {\n                console.error('‚ùå Failed to start monitoring:', error);\n                setIsConnected(false);\n            }\n        }\n    }[\"useMintDetection.useCallback[startMonitoring]\"], [\n        isMonitoring,\n        subscriptionId,\n        processNewToken,\n        connection,\n        pollForNewMints\n    ]);\n    const stopMonitoring = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useMintDetection.useCallback[stopMonitoring]\": async ()=>{\n            if (!subscriptionId) return;\n            const activeConnection = connection || _services_HeliusConnection__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getRpcConnection();\n            try {\n                // Clear intervals\n                if (intervals.heartbeat) clearInterval(intervals.heartbeat);\n                if (intervals.polling) clearInterval(intervals.polling);\n                setIntervals({});\n                // Remove logs subscription\n                activeConnection.removeOnLogsListener(subscriptionId);\n                // Reset state\n                setSubscriptionId(null);\n                setIsConnected(false);\n                setHeartbeatCount(0);\n                setLastHeartbeat(0);\n                setAccountsProcessed(0);\n                setPollingResults(0);\n                console.log('üõë onLogs monitoring stopped');\n            } catch (error) {\n                console.error('Error stopping monitoring:', error);\n            }\n        }\n    }[\"useMintDetection.useCallback[stopMonitoring]\"], [\n        subscriptionId,\n        connection,\n        intervals\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useMintDetection.useEffect\": ()=>{\n            if (isMonitoring) {\n                startMonitoring();\n            } else {\n                stopMonitoring();\n            }\n            return ({\n                \"useMintDetection.useEffect\": ()=>{\n                    // Cleanup on unmount\n                    if (intervals.heartbeat) clearInterval(intervals.heartbeat);\n                    if (intervals.polling) clearInterval(intervals.polling);\n                    if (subscriptionId) {\n                        const activeConnection = connection || _services_HeliusConnection__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getRpcConnection();\n                        activeConnection.removeOnLogsListener(subscriptionId);\n                    }\n                }\n            })[\"useMintDetection.useEffect\"];\n        }\n    }[\"useMintDetection.useEffect\"], [\n        isMonitoring,\n        startMonitoring,\n        stopMonitoring\n    ]);\n    const clearDetectedTokens = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useMintDetection.useCallback[clearDetectedTokens]\": ()=>{\n            setDetectedTokens([]);\n        }\n    }[\"useMintDetection.useCallback[clearDetectedTokens]\"], []);\n    const removeToken = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useMintDetection.useCallback[removeToken]\": (mint)=>{\n            setDetectedTokens({\n                \"useMintDetection.useCallback[removeToken]\": (prev)=>prev.filter({\n                        \"useMintDetection.useCallback[removeToken]\": (token)=>token.mint !== mint\n                    }[\"useMintDetection.useCallback[removeToken]\"])\n            }[\"useMintDetection.useCallback[removeToken]\"]);\n        }\n    }[\"useMintDetection.useCallback[removeToken]\"], []);\n    return {\n        detectedTokens,\n        isConnected,\n        isMonitoring: Boolean(subscriptionId),\n        heartbeatCount,\n        lastHeartbeat,\n        accountsProcessed,\n        pollingResults,\n        clearDetectedTokens,\n        removeToken\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/hooks/useMintDetection.ts\n"));

/***/ })

});